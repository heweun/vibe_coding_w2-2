---
description:
globs:
alwaysApply: false
---
# GitHub 관리 룰

## PR (Pull Request) 관리 규칙

### PR 생성 시 체크리스트
- [ ] 브랜치명이 컨벤션을 따르는가? (feature/, bugfix/, hotfix/, docs/ 등)
- [ ] PR 제목이 명확하고 구체적인가?
- [ ] 변경 사항에 대한 설명이 충분한가?
- [ ] 테스트 코드가 포함되어 있는가?
- [ ] 기존 테스트가 모두 통과하는가?
- [ ] 코드 리뷰를 받을 준비가 되었는가?

### PR 제목 컨벤션
- `feat: 새로운 기능 추가`
- `fix: 버그 수정`
- `docs: 문서 업데이트`
- `style: 코드 스타일 변경 (포맷팅, 세미콜론 등)`
- `refactor: 코드 리팩토링`
- `test: 테스트 코드 추가/수정`
- `chore: 빌드 프로세스, 도구 설정 등`

### PR 라벨 자동 분류
- `backend`: backend/ 디렉토리 변경
- `frontend`: frontend/ 디렉토리 변경
- `documentation`: docs/ 디렉토리 또는 문서 관련 변경
- `tests`: 테스트 코드 변경
- `dependencies`: requirements.txt, setup.py 변경
- `ci/cd`: .github/ 디렉토리 변경
- `size/small`: 50줄 미만 변경
- `size/medium`: 50-200줄 변경
- `size/large`: 200줄 초과 변경

### PR 리뷰 가이드라인
1. **코드 품질**
   - 코딩 컨벤션 준수
   - 가독성과 유지보수성
   - 성능 최적화

2. **보안**
   - 민감 정보 하드코딩 방지
   - 입력 검증 확인
   - 권한 체크

3. **테스트**
   - 단위 테스트 커버리지
   - 통합 테스트 확인
   - 에지 케이스 처리

## 이슈 (Issue) 관리 규칙

### 이슈 생성 시 포함할 정보

#### 버그 리포트
- **문제 설명**: 발생한 문제의 명확한 설명
- **재현 단계**: 버그를 재현할 수 있는 정확한 단계
- **예상 동작**: 기대했던 동작
- **실제 동작**: 실제로 일어난 동작
- **환경 정보**: OS, 브라우저, Python 버전 등
- **스크린샷/로그**: 관련 스크린샷이나 에러 로그

#### 기능 제안
- **기능 설명**: 제안하는 기능의 상세 설명
- **사용 사례**: 해당 기능이 필요한 상황
- **예상 이익**: 기능 구현으로 얻을 수 있는 이점
- **구현 방안**: 가능한 구현 아이디어
- **우선순위**: 기능의 중요도

#### 질문
- **상황 설명**: 현재 상황의 구체적 설명
- **시도한 방법**: 이미 시도해본 해결 방법
- **관련 코드**: 문제와 관련된 코드 스니펫
- **에러 메시지**: 발생한 에러의 전체 메시지

### 이슈 라벨 분류 체계

#### 유형별 라벨
- `bug`: 버그 리포트
- `enhancement`: 새로운 기능 제안
- `question`: 질문 및 도움 요청
- `documentation`: 문서 관련 이슈

#### 컴포넌트별 라벨
- `backend`: 백엔드 관련 이슈
- `frontend`: 프론트엔드 관련 이슈
- `testing`: 테스트 관련 이슈
- `ci/cd`: CI/CD 관련 이슈
- `security`: 보안 관련 이슈
- `performance`: 성능 관련 이슈

#### 우선순위 라벨
- `priority/high`: 높은 우선순위 (긴급, 중요)
- `priority/medium`: 중간 우선순위 (기본값)
- `priority/low`: 낮은 우선순위 (사소함)

#### 상태 라벨
- `status/triage`: 검토 필요
- `status/in-progress`: 진행 중
- `status/blocked`: 차단됨
- `status/ready`: 작업 준비됨

#### 기여자 라벨
- `good first issue`: 초보자에게 적합한 이슈
- `first-time-contributor`: 첫 기여자

### 담당자 할당 규칙
- **Backend 이슈**: backend 개발팀 멤버 중 자동 할당
- **Frontend 이슈**: frontend 개발팀 멤버 중 자동 할당
- **DevOps 이슈**: devops 팀 멤버 중 자동 할당
- **일반 이슈**: 리드 개발자 또는 시니어 개발자에게 할당

### 자동화된 워크플로우
1. **이슈 생성 시**
   - 자동 라벨링
   - 담당자 할당
   - 템플릿 기반 안내 댓글 추가

2. **PR 생성 시**
   - 자동 라벨링
   - 리뷰어 할당
   - 체크리스트 댓글 추가
   - 자동 코드 리뷰 실행

3. **코드 변경 시**
   - 자동 테스트 실행
   - 커버리지 체크
   - 코드 품질 분석

## 브랜치 전략

### 브랜치 명명 규칙
- `main`: 프로덕션 브랜치
- `develop`: 개발 브랜치
- `feature/[기능명]`: 새로운 기능 개발
- `bugfix/[버그명]`: 버그 수정
- `hotfix/[긴급수정명]`: 긴급 수정
- `docs/[문서명]`: 문서 업데이트

### 머지 규칙
- `main` 브랜치는 항상 배포 가능한 상태 유지
- PR은 최소 1명 이상의 리뷰 필요
- 모든 테스트가 통과해야 머지 가능
- `main`으로의 직접 푸시 금지
